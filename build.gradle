buildscript {
    ext {
        set("springBootVersion", "2.4.10")
        set("springBootManagementVersion", "1.0.11.RELEASE")
    }
    repositories {
        mavenLocal()
        //使用阿里云镜像代理 网络不佳时使用； 会报 Fatal Error 但不影响使用
//        maven { url 'https://maven.aliyun.com/repository/spring/' }
//        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
//        maven { url 'https://maven.aliyun.com/repository/public/' }


        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springBootManagementVersion}")
    }
}

// 子项目通用配置
subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "java"
    apply plugin: 'application'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group 'org.example'
    version '1.0-SNAPSHOT'
    sourceCompatibility = '11'


    ext {
        set('springCloudVersion', "2020.0.3")
        set("springBootVersion", "2.4.10")
        set('springBootAdminVersion', "2.4.3")
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    repositories {
        mavenLocal()
        //使用阿里云镜像代理 网络不佳时使用；会报 Fatal Error 但不影响使用
//        maven { url 'https://maven.aliyun.com/repository/spring/' }
//        maven { url 'https://maven.aliyun.com/repository/public/' }
//        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }


        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        mavenCentral()
    }
    dependencies {
//        compileOnly 'org.projectlombok:lombok'
//        developmentOnly 'org.springframework.boot:spring-boot-devtools'
//        annotationProcessor 'org.projectlombok:lombok'
//        testImplementation 'org.springframework.boot:spring-boot-starter-test'
//        implementation 'org.springframework.boot:spring-boot-starter-actuator'
    }
    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }


    jar {
        enabled true
        // 构建一个完整的jar 包
        // 新方法 ，https://docs.gradle.org/current/userguide/working_with_files.html#sec:creating_uber_jar_example
        archiveClassifier = 'boot'
        from sourceSets.main.output
        dependsOn configurations.runtimeClasspath
        from {
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }
    test {
        useJUnitPlatform()
    }
}

